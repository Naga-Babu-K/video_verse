<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VideoVerse - Media Generator</title>
    <link rel="shortcut icon" href="https://icons.veryicon.com/png/o/education-technology/artificial-intelligence-2/mtsai-video-ai.png" type="image/x-icon">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .media-container {
            transition: all 0.3s ease;
        }
        .media-container:hover {
            transform: scale(1.02);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }
        .history-item {
            transition: all 0.2s ease;
            cursor: pointer;
        }
        .history-item:hover {
            transform: translateY(-3px);
        }
        .tab-button {
            transition: all 0.2s ease;
        }
        .tab-button.active {
            background-color: #3b82f6;
            color: white;
        }
        .modal {
            transition: opacity 0.3s ease;
        }
        .modal-content {
            transition: all 0.3s ease;
            transform: scale(0.9);
        }
        .modal.active {
            opacity: 1;
            pointer-events: auto;
        }
        .modal.active .modal-content {
            transform: scale(1);
        }
        .nav-arrow {
            transition: all 0.2s ease;
            opacity: 0.7;
        }
        .nav-arrow:hover {
            opacity: 1;
            transform: scale(1.1);
        }
    </style>
</head>

<body class="gradient-bg flex items-center justify-center min-h-screen p-4">
    <div class="w-full max-w-4xl">
        <div class="bg-white rounded-xl shadow-2xl overflow-hidden">
            <div class="md:flex">
                <!-- Left Section: Form -->
                <div class="p-8 md:w-1/2">
                    <h1 class="text-3xl font-bold text-center mb-6 text-gray-800">AI Media Generator</h1>
                    
                    <div class="mb-6">
                        <label class="block text-gray-700 font-medium mb-2">Media Type</label>
                        <select id="type" class="w-full border-2 border-gray-200 p-3 rounded-lg focus:border-blue-500 focus:outline-none transition">
                            <option value="gif">GIF</option>
                            <option value="video">Short Video</option>
                        </select>
                    </div>
                    
                    <div class="mb-6">
                        <label class="block text-gray-700 font-medium mb-2">Prompt</label>
                        <div class="relative">
                            <input type="text" id="prompt" class="w-full border-2 border-gray-200 p-3 rounded-lg focus:border-blue-500 focus:outline-none transition" placeholder="Describe what you want to generate...">
                            <button onclick="suggestPrompt()" class="absolute right-2 top-2 bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-1 rounded text-sm transition">
                                Suggest
                            </button>
                        </div>
                    </div>
                    
                    <button onclick="generateMedia()" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition transform hover:scale-105">
                        Generate Media
                    </button>
                    
                    <div class="mt-6 text-center text-gray-500 text-sm">
                        <p>Try prompts like "cute puppies" or "sunset beach"</p>
                    </div>
                </div>
                
                <!-- Right Section: Results -->
                <div class="p-8 md:w-1/2 bg-gray-50 flex flex-col items-center justify-center">
                    <div id="loading" class="hidden text-center my-4">
                        <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-blue-600 mx-auto mb-4"></div>
                        <p class="text-gray-600">Generating your media...</p>
                        <p class="text-gray-500 text-sm mt-2" id="generation-text">This may take a few moments</p>
                    </div>
                    
                    <div id="result" class="hidden w-full text-center">
                        <h2 class="text-xl font-semibold mb-4 text-gray-800">Your Generated <span id="media-type-label">GIF</span></h2>
                        <div id="output" class="media-container bg-white p-2 rounded-lg shadow-md mb-4">
                            <!-- Media will appear here -->
                        </div>
                        <div class="flex justify-center gap-4">
                            <a id="downloadBtn" href="#" download class="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-lg transition">
                                Download
                            </a>
                            <button onclick="shareMedia()" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg transition">
                                Share
                            </button>
                            <button onclick="saveToProfile()" class="bg-purple-500 hover:bg-purple-600 text-white px-6 py-2 rounded-lg transition">
                                Save
                            </button>
                        </div>
                    </div>
                    
                    <div id="error" class="hidden text-center p-4 bg-red-100 text-red-700 rounded-lg">
                        <p id="error-message"></p>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Recent Generations Section -->
        <div id="history" class="mt-8 bg-white bg-opacity-90 rounded-xl p-6">
            <div class="flex mb-4 border-b">
                <button id="gifTab" class="tab-button active px-4 py-2 rounded-t-lg" onclick="showTab('gif')">GIF History</button>
                <button id="videoTab" class="tab-button px-4 py-2 rounded-t-lg" onclick="showTab('video')">Video History</button>
            </div>
            
            <h2 class="text-xl font-bold mb-4 text-gray-800" id="history-title">Recent GIF Generations</h2>
            
            <div id="gif-history-items" class="grid grid-cols-2 md:grid-cols-3 gap-4">
                <!-- GIF history items will be added here -->
                <div class="bg-gray-100 rounded-lg p-4 text-center text-gray-500">
                    No GIFs generated yet
                </div>
            </div>
            
            <div id="video-history-items" class="hidden grid grid-cols-1 gap-4">
                <!-- Video history items will be added here -->
                <div class="bg-gray-100 rounded-lg p-4 text-center text-gray-500">
                    No videos generated yet
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Popup -->
    <div id="mediaModal" class="modal fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 opacity-0 pointer-events-none transition">
        <div class="modal-content bg-white rounded-xl max-w-4xl w-full mx-4 relative">
            <button onclick="closeModal()" class="absolute top-4 right-4 text-gray-500 hover:text-gray-700 z-10">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            
            <div class="flex items-center justify-center h-full">
                <button onclick="navigateMedia(-1)" class="nav-arrow absolute left-4 bg-white p-2 rounded-full shadow-md z-10">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                
                <div class="w-full h-full p-8 flex flex-col items-center justify-center">
                    <div id="modalMediaContainer" class="max-w-full max-h-[70vh] overflow-hidden">
                        <!-- Media will be inserted here -->
                    </div>
                    <p id="modalPrompt" class="mt-4 text-lg font-medium text-gray-800 text-center"></p>
                    <div class="flex mt-4 space-x-2">
                        <span id="currentIndex">1</span>
                        <span>/</span>
                        <span id="totalItems">0</span>
                    </div>
                </div>
                
                <button onclick="navigateMedia(1)" class="nav-arrow absolute right-4 bg-white p-2 rounded-full shadow-md z-10">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <script>
        // API Keys (in production, these should be handled server-side)
        const GIPHY_API_KEY = 'E92SnAtLGR54b7m6fVvYKUq4gkncGNLm';
        const PEXELS_API_KEY = 'Cp2y9Znf7ZNi0Iw4aLR3h32VsV5JxemMvQblbUbyRZvoXLxTQEhNSg6q'; // Replace with your Pexels API key
        
        // Local storage keys
        const GIF_HISTORY_KEY = 'gifHistory';
        const VIDEO_HISTORY_KEY = 'videoHistory';
        
        // Global variables for modal navigation
        let currentMediaType = 'gif';
        let currentMediaIndex = 0;
        let mediaItems = [];
        
        // Prompt suggestions
        const gifPrompts = [
            "Cute puppies playing in snow",
            "Sunset over tropical beach",
            "Cartoon characters dancing",
            "Abstract colorful patterns",
            "Space galaxy with stars"
        ];
        
        const videoPrompts = [
            "Futuristic city with flying cars",
            "Cyberpunk night market scene",
            "Underwater coral reef life",
            "Mountain landscape time-lapse",
            "Neon lights in Tokyo streets"
        ];
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            loadHistory();
        });
        
        function suggestPrompt() {
            const type = document.getElementById("type").value;
            const prompts = type === "gif" ? gifPrompts : videoPrompts;
            const randomPrompt = prompts[Math.floor(Math.random() * prompts.length)];
            document.getElementById("prompt").value = randomPrompt;
        }
        
        // Update media type label when select changes
        document.getElementById("type").addEventListener("change", function() {
            document.getElementById("media-type-label").textContent = 
                this.value === "gif" ? "GIF" : "Video";
        });
        
        // Main media generation function
        async function generateMedia() {
            const type = document.getElementById("type").value;
            const prompt = document.getElementById("prompt").value.trim();
            const resultDiv = document.getElementById("result");
            const outputDiv = document.getElementById("output");
            const downloadBtn = document.getElementById("downloadBtn");
            const loadingDiv = document.getElementById("loading");
            const errorDiv = document.getElementById("error");
            
            // Hide previous results/errors
            resultDiv.classList.add("hidden");
            errorDiv.classList.add("hidden");
            
            if (!prompt) {
                showError("Please enter a prompt");
                return;
            }
            
            // Show loading state
            loadingDiv.classList.remove("hidden");
            outputDiv.innerHTML = "";
            
            try {
                let mediaUrl;
                
                if (type === "gif") {
                    // Generate GIF using GIPHY API
                    mediaUrl = await generateGif(prompt);
                } else {
                    // Generate Video using Pexels API
                    mediaUrl = await generateVideo(prompt);
                }
                
                // Display the generated media
                if (type === "gif") {
                    outputDiv.innerHTML = `
                        <img src="${mediaUrl}" 
                             alt="Generated GIF" 
                             class="w-full h-auto rounded-lg cursor-pointer"
                             onclick="openMediaModal('${type}', '${mediaUrl}', '${prompt.replace(/'/g, "\\'")}')"
                             onerror="this.onerror=null;this.src='https://via.placeholder.com/500x500?text=GIF+Failed+to+Load'">
                        <p class="text-sm text-gray-500 mt-2">Prompt: "${prompt}"</p>
                    `;
                } else {
                    outputDiv.innerHTML = `
                        <video controls autoplay loop class="w-full h-auto rounded-lg cursor-pointer"
                               onclick="openMediaModal('${type}', '${mediaUrl}', '${prompt.replace(/'/g, "\\'")}')">
                            <source src="${mediaUrl}" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <p class="text-sm text-gray-500 mt-2">Prompt: "${prompt}"</p>
                    `;
                }
                
                // Set download link
                downloadBtn.href = mediaUrl;
                downloadBtn.download = `generated-${type}-${Date.now()}.${type === "gif" ? "gif" : "mp4"}`;
                
                // Show result
                resultDiv.classList.remove("hidden");
                
                // Add to history and local storage
                addToHistory(type, prompt, mediaUrl);
                saveToLocalStorage(type, prompt, mediaUrl);
                
            } catch (error) {
                console.error("Generation error:", error);
                showError(error.message || "Failed to generate media. Please try again.");
            } finally {
                loadingDiv.classList.add("hidden");
            }
        }
        
        // Generate GIF using GIPHY API
        async function generateGif(prompt) {
            const response = await fetch(`https://api.giphy.com/v1/gifs/translate?api_key=${GIPHY_API_KEY}&s=${encodeURIComponent(prompt)}`);
            const data = await response.json();
            
            if (!response.ok || !data.data?.images?.original?.url) {
                throw new Error(data.message || "No GIF found for this prompt");
            }
            
            return data.data.images.original.url;
        }
        
        // Generate Video using Pexels API
        async function generateVideo(prompt) {
            const response = await fetch(`https://api.pexels.com/videos/search?query=${encodeURIComponent(prompt)}&per_page=1`, {
                headers: {
                    'Authorization': PEXELS_API_KEY
                }
            });
            const data = await response.json();
            
            if (!response.ok || !data.videos?.length) {
                throw new Error("No video found for this prompt");
            }
            
            // Get the first HD video file
            const videoFile = data.videos[0].video_files.find(file => file.quality === 'hd' || file.quality === 'sd');
            
            if (!videoFile) {
                throw new Error("No playable video found");
            }
            
            return videoFile.link;
        }
        
        function showError(message) {
            const errorDiv = document.getElementById("error");
            document.getElementById("error-message").textContent = message;
            errorDiv.classList.remove("hidden");
        }
        
        // Add to history display
        function addToHistory(type, prompt, url) {
            const containerId = `${type}-history-items`;
            const container = document.getElementById(containerId);
            
            // Remove placeholder if exists
            if (container.children.length === 1 && container.children[0].textContent.includes("No ")) {
                container.innerHTML = '';
            }
            
            // Create history item
            const item = document.createElement("div");
            item.className = `history-item bg-white p-3 rounded-lg shadow ${type === 'video' ? 'col-span-1' : ''}`;
            
            if (type === "gif") {
                item.innerHTML = `
                    <div class="media-thumbnail overflow-hidden rounded-lg mb-2">
                        <img src="${url}" alt="${prompt}" class="w-full h-24 object-cover"
                             onclick="openMediaModal('${type}', '${url}', '${prompt.replace(/'/g, "\\'")}')">
                    </div>
                    <p class="text-sm text-gray-600 truncate" title="${prompt}">${prompt}</p>
                    <div class="flex justify-between mt-2">
                        <button onclick="regenerateFromHistory('${type}', '${prompt.replace(/'/g, "\\'")}')" 
                                class="text-xs text-blue-500 hover:text-blue-700">
                            Regenerate
                        </button>
                        <button onclick="deleteHistoryItem('${type}', '${url}')" 
                                class="text-xs text-red-500 hover:text-red-700">
                            Delete
                        </button>
                    </div>
                `;
            } else {
                item.innerHTML = `
                    <div class="media-thumbnail overflow-hidden rounded-lg mb-2">
                        <video class="w-full h-40 object-cover" muted loop
                               onclick="openMediaModal('${type}', '${url}', '${prompt.replace(/'/g, "\\'")}')">
                            <source src="${url}" type="video/mp4">
                        </video>
                    </div>
                    <p class="text-sm text-gray-600 truncate" title="${prompt}">${prompt}</p>
                    <div class="flex justify-between mt-2">
                        <button onclick="regenerateFromHistory('${type}', '${prompt.replace(/'/g, "\\'")}')" 
                                class="text-xs text-blue-500 hover:text-blue-700">
                            Regenerate
                        </button>
                        <button onclick="deleteHistoryItem('${type}', '${url}')" 
                                class="text-xs text-red-500 hover:text-red-700">
                            Delete
                        </button>
                    </div>
                `;
            }
            
            // Add to beginning of history
            container.insertBefore(item, container.firstChild);
            
            // Limit history to 12 items
            if (container.children.length > 12) {
                container.removeChild(container.lastChild);
            }
        }
        
        // Save to local storage
        function saveToLocalStorage(type, prompt, url) {
            const key = type === 'gif' ? GIF_HISTORY_KEY : VIDEO_HISTORY_KEY;
            let history = JSON.parse(localStorage.getItem(key)) || [];
            
            history.unshift({
                prompt: prompt,
                url: url,
                timestamp: new Date().toISOString()
            });
            
            // Keep only the last 12 items
            history = history.slice(0, 12);
            
            localStorage.setItem(key, JSON.stringify(history));
        }
        
        // Load history from local storage
        function loadHistory() {
            // Load GIF history
            const gifHistory = JSON.parse(localStorage.getItem(GIF_HISTORY_KEY)) || [];
            const gifContainer = document.getElementById('gif-history-items');
            
            if (gifHistory.length > 0) {
                gifContainer.innerHTML = '';
                gifHistory.forEach(item => {
                    addToHistory('gif', item.prompt, item.url);
                });
            }
            
            // Load video history
            const videoHistory = JSON.parse(localStorage.getItem(VIDEO_HISTORY_KEY)) || [];
            const videoContainer = document.getElementById('video-history-items');
            
            if (videoHistory.length > 0) {
                videoContainer.innerHTML = '';
                videoHistory.forEach(item => {
                    addToHistory('video', item.prompt, item.url);
                });
            }
        }
        
        // Delete history item
        function deleteHistoryItem(type, url) {
            const key = type === 'gif' ? GIF_HISTORY_KEY : VIDEO_HISTORY_KEY;
            let history = JSON.parse(localStorage.getItem(key)) || [];
            
            // Remove from local storage
            history = history.filter(item => item.url !== url);
            localStorage.setItem(key, JSON.stringify(history));
            
            // Remove from UI
            const containerId = `${type}-history-items`;
            const container = document.getElementById(containerId);
            const items = container.getElementsByClassName('history-item');
            
            for (let i = 0; i < items.length; i++) {
                if (items[i].querySelector('img')?.src === url || 
                    items[i].querySelector('source')?.src === url) {
                    container.removeChild(items[i]);
                    break;
                }
            }
            
            // Show placeholder if empty
            if (container.children.length === 0) {
                const placeholder = document.createElement('div');
                placeholder.className = 'bg-gray-100 rounded-lg p-4 text-center text-gray-500';
                placeholder.textContent = `No ${type}s generated yet`;
                container.appendChild(placeholder);
            }
        }
        
        // Switch between GIF and Video tabs
        function showTab(type) {
            // Update active tab button
            document.getElementById('gifTab').classList.remove('active');
            document.getElementById('videoTab').classList.remove('active');
            document.getElementById(`${type}Tab`).classList.add('active');
            
            // Update title
            document.getElementById('history-title').textContent = 
                type === 'gif' ? 'Recent GIF Generations' : 'Recent Video Generations';
            
            // Show correct content
            document.getElementById('gif-history-items').classList.toggle('hidden', type !== 'gif');
            document.getElementById('video-history-items').classList.toggle('hidden', type !== 'video');
            document.getElementById('video-history-items').classList.toggle('grid', type === 'video');
            
            currentMediaType = type;
        }
        
        // Modal functions
        function openMediaModal(type, url, prompt) {
            currentMediaType = type;
            
            // Get all media items of the current type
            const key = type === 'gif' ? GIF_HISTORY_KEY : VIDEO_HISTORY_KEY;
            mediaItems = JSON.parse(localStorage.getItem(key)) || [];
            
            // Find current index
            currentMediaIndex = mediaItems.findIndex(item => item.url === url);
            if (currentMediaIndex === -1) currentMediaIndex = 0;
            
            // Update modal content
            updateModalContent();
            
            // Show modal
            document.getElementById('mediaModal').classList.add('active');
        }
        
        function closeModal() {
            document.getElementById('mediaModal').classList.remove('active');
        }
        
        function navigateMedia(direction) {
            currentMediaIndex += direction;
            
            // Wrap around if at beginning/end
            if (currentMediaIndex < 0) {
                currentMediaIndex = mediaItems.length - 1;
            } else if (currentMediaIndex >= mediaItems.length) {
                currentMediaIndex = 0;
            }
            
            updateModalContent();
        }
        
        function updateModalContent() {
            const container = document.getElementById('modalMediaContainer');
            const promptElement = document.getElementById('modalPrompt');
            const currentIndexElement = document.getElementById('currentIndex');
            const totalItemsElement = document.getElementById('totalItems');
            
            if (mediaItems.length === 0) {
                container.innerHTML = '<p class="text-gray-500">No media available</p>';
                promptElement.textContent = '';
                currentIndexElement.textContent = '0';
                totalItemsElement.textContent = '0';
                return;
            }
            
            const currentItem = mediaItems[currentMediaIndex];
            
            if (currentMediaType === 'gif') {
                container.innerHTML = `
                    <img src="${currentItem.url}" 
                         alt="${currentItem.prompt}" 
                         class="max-w-full max-h-[70vh] object-contain">
                `;
            } else {
                container.innerHTML = `
                    <video controls autoplay loop class="max-w-full max-h-[70vh]">
                        <source src="${currentItem.url}" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                `;
            }
            
            promptElement.textContent = currentItem.prompt;
            currentIndexElement.textContent = currentMediaIndex + 1;
            totalItemsElement.textContent = mediaItems.length;
        }
        
        function regenerateFromHistory(type, prompt) {
            document.getElementById("type").value = type;
            document.getElementById("prompt").value = prompt;
            generateMedia();
        }
        
        function shareMedia() {
            const mediaUrl = document.getElementById("downloadBtn").href;
            const prompt = document.getElementById("prompt").value;
            
            if (navigator.share) {
                navigator.share({
                    title: 'Check out this generated media',
                    text: `I created this with the prompt: "${prompt}"`,
                    url: mediaUrl
                }).catch(err => {
                    console.log('Error sharing:', err);
                    copyToClipboard(mediaUrl);
                });
            } else {
                copyToClipboard(mediaUrl);
            }
        }
        
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                alert('Link copied to clipboard!');
            }).catch(err => {
                console.error('Could not copy text: ', err);
                prompt('Copy this link:', text);
            });
        }
        
        function saveToProfile() {
            alert('In a full app, this would save to your profile');
        }
        
        // Close modal when clicking outside content
        document.getElementById('mediaModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });
        
        // Keyboard navigation in modal
        document.addEventListener('keydown', function(e) {
            const modal = document.getElementById('mediaModal');
            if (modal.classList.contains('active')) {
                if (e.key === 'Escape') {
                    closeModal();
                } else if (e.key === 'ArrowLeft') {
                    navigateMedia(-1);
                } else if (e.key === 'ArrowRight') {
                    navigateMedia(1);
                }
            }
        });
    </script>
</body>
</html>